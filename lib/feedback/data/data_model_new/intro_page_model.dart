import 'package:zonka_feedback/feedback/data/data_model_new/background_gallery_image.dart';
import 'package:zonka_feedback/feedback/data/data_model_new/intro_page_translation.dart';
import 'package:zonka_feedback/feedback/data/data_model_new/page_logo_gallery_image.dart';
import 'package:hive/hive.dart';
import 'package:zonka_feedback/services/hive/hive_type_id.dart';

part 'intro_page_model.g.dart'; // This file will be generated by Hive

@HiveType(typeId: HiveTypeId.introPageModelId)  // Assign a unique typeId for this class
class IntroPage extends HiveObject {
  @HiveField(0)
  final bool? applyPageBackgroundImage;

  @HiveField(1)
  final BackgroundGalleryImageId? backgroundGalleryImageId;

  @HiveField(2)
  final String? pageBgColor;

  @HiveField(3)
  final bool? useCustomHeadingColor;

  @HiveField(4)
  final PageLogoGalleryImageId? pageLogoGalleryImageId;

  @HiveField(5)
  final String? fontSizeGetStartButton;

  @HiveField(6)
  final String? fontColorGetStartButton;

  @HiveField(7)
  final String? fontFamilyGetStartButton;

  @HiveField(8)
  final String? bgColorGetStartButton;

  @HiveField(9)
  final String? buttonStyle;

  @HiveField(10)
  final String? fontSizeUpperText;

  @HiveField(11)
  final String? fontColorUpperText;

  @HiveField(12)
  final String? fontFamilyUpperText;

  @HiveField(13)
  final String? fontSizeBottomText;

  @HiveField(14)
  final String? fontColorBottomText;

  @HiveField(15)
  final String? fontFamilyBottomText;

  @HiveField(16)
  final Map<String, IntroPageTranslation>? translations;

  @HiveField(17)
  final String? id;

  IntroPage({
    required this.applyPageBackgroundImage,
    required this.backgroundGalleryImageId,
    required this.pageBgColor,
    required this.useCustomHeadingColor,
    required this.pageLogoGalleryImageId,
    required this.fontSizeGetStartButton,
    required this.fontColorGetStartButton,
    required this.fontFamilyGetStartButton,
    required this.bgColorGetStartButton,
    required this.buttonStyle,
    required this.fontSizeUpperText,
    required this.fontColorUpperText,
    required this.fontFamilyUpperText,
    required this.fontSizeBottomText,
    required this.fontColorBottomText,
    required this.fontFamilyBottomText,
    required this.translations,
    required this.id,
  });

  factory IntroPage.fromJson(Map<String, dynamic>? json) {
    if (json == null) {
      throw ArgumentError("JSON data cannot be null");
    }

    return IntroPage(
      applyPageBackgroundImage: json["applyPageBackgroundImage"],
      backgroundGalleryImageId: json["backgroundGalleryImageId"] != null
          ? BackgroundGalleryImageId.fromJson(json["backgroundGalleryImageId"])
          : null,
      pageBgColor: json["pageBgColor"],
      useCustomHeadingColor: json["useCustomHeadingColor"],
      pageLogoGalleryImageId: json["pageLogoGalleryImageId"] != null
          ? PageLogoGalleryImageId.fromJson(json["pageLogoGalleryImageId"])
          : null,
      fontSizeGetStartButton: json["fontSizeGetStartButton"],
      fontColorGetStartButton: json["fontColorGetStartButton"],
      fontFamilyGetStartButton: json["fontFamilyGetStartButton"],
      bgColorGetStartButton: json["bgColorGetStartButton"],
      buttonStyle: json["buttonStyle"],
      fontSizeUpperText: json["fontSizeUpperText"],
      fontColorUpperText: json["fontColorUpperText"],
      fontFamilyUpperText: json["fontFamilyUpperText"],
      fontSizeBottomText: json["fontSizeBottomText"],
      fontColorBottomText: json["fontColorBottomText"],
      fontFamilyBottomText: json["fontFamilyBottomText"],
      translations: json["translations"] == null
          ? null
          : Map.from(json["translations"]).map((k, v) => MapEntry<String, IntroPageTranslation>(k, IntroPageTranslation.fromJson(v))),
      id: json["_id"],
    );
  }
}
